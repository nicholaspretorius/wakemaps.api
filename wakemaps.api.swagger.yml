swagger: "2.0"
info:
  description: "WakeMaps API Spec"
  version: "0.0.1"
  title: "WakeMaps API"
  termsOfService: ""
  contact:
    email: "nicholaspre"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: ""
basePath: "/api"
tags:
  - name: "wakeparks"
    description: "Wakepark listings around the world"
    externalDocs:
      description: "Find out more"
      url: ""
  - name: "cable_data"
    description: "Cable-specific data"
  - name: "countries"
    description: "Relevant country data"
    externalDocs:
      description: "Find out more about country data"
      url: ""
  - name: "currencies"
    description: "Relevant currency data"
  - name: "locations"
    description: "Wakepark location data"
  - name: "users"
    description: "System user information"
  - name: "languages"
    description: "Languages used at wakeparks"
schemes:
  - "https"
  - "http"
paths:
  /wakeparks:
    get:
      tags:
        - "wakepark"
      summary: "Get wakeparks"
      description: "Returns a list of all wakeparks that can be paged or provided with a search term."
      operationId: "retrieve_wakeparks"
      produces:
        - "application/json"
      parameters:
        - name: "per_page"
          in: "query"
          description: "Number of items to be returned per page"
          required: false
          type: "string"
        - name: "search"
          in: "query"
          description: "Search term"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Wakepark"
    post:
      tags:
        - "wakepark"
      summary: "Add a new wakepark"
      description: ""
      operationId: "create_wakepark"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Wakepark object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Wakepark"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    patch:
      tags:
        - "wakepark"
      summary: "Update an existing wakepark"
      description: ""
      operationId: "patch_wakepark"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Wakepark object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Wakepark"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "resource not found"
        405:
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /wakeparks/{wakeparkId}:
    get:
      tags:
        - "wakepark"
      summary: "Get wakepark by ID"
      description: "Returns a single wakepark"
      operationId: "retrieve_wakepark"
      produces:
        - "application/json"
      parameters:
        - name: "wakeparkId"
          in: "path"
          description: "ID of wakepark to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/Wakepark"
        400:
          description: "Invalid ID supplied"
        404:
          description: "resource not found"
      security:
        - api_key: []
    post:
      tags:
        - "wakepark"
      summary: "Updates a wakepark in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "wakeparkId"
          in: "path"
          description: "ID of wakepark that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "wakepark"
          in: "body"
          description: "Wakepark object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Wakepark"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "resource not found"
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - "wakepark"
      summary: "Deletes a wakepark"
      description: ""
      operationId: "delete_wakepark"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "wakepark"
          in: "path"
          description: "Wakepark id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Wakepark not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  # /store/inventory:
  #   get:
  #     tags:
  #       - "store"
  #     summary: "Returns pet inventories by status"
  #     description: "Returns a map of status codes to quantities"
  #     operationId: "getInventory"
  #     produces:
  #       - "application/json"
  #     parameters: []
  #     responses:
  #       200:
  #         description: "successful operation"
  #         schema:
  #           type: "object"
  #           additionalProperties:
  #             type: "integer"
  #             format: "int32"
  #     security:
  #       - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #       - "store"
  #     summary: "Place an order for a pet"
  #     description: ""
  #     operationId: "placeOrder"
  #     produces:
  #       - "application/xml"
  #       - "application/json"
  #     parameters:
  #       - in: "body"
  #         name: "body"
  #         description: "order placed for purchasing the pet"
  #         required: true
  #         schema:
  #           $ref: "#/definitions/Order"
  #     responses:
  #       200:
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Order"
  #       400:
  #         description: "Invalid Order"
  # /store/order/{orderId}:
  #   get:
  #     tags:
  #       - "store"
  #     summary: "Find purchase order by ID"
  #     description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
  #     operationId: "getOrderById"
  #     produces:
  #       - "application/xml"
  #       - "application/json"
  #     parameters:
  #       - name: "orderId"
  #         in: "path"
  #         description: "ID of pet that needs to be fetched"
  #         required: true
  #         type: "integer"
  #         maximum: 10.0
  #         minimum: 1.0
  #         format: "int64"
  #     responses:
  #       200:
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Order"
  #       400:
  #         description: "Invalid ID supplied"
  #       404:
  #         description: "Order not found"
  #   delete:
  #     tags:
  #       - "store"
  #     summary: "Delete purchase order by ID"
  #     description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
  #     operationId: "deleteOrder"
  #     produces:
  #       - "application/xml"
  #       - "application/json"
  #     parameters:
  #       - name: "orderId"
  #         in: "path"
  #         description: "ID of the order that needs to be deleted"
  #         required: true
  #         type: "integer"
  #         minimum: 1.0
  #         format: "int64"
  #     responses:
  #       400:
  #         description: "Invalid ID supplied"
  #       404:
  #         description: "Order not found"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  # /user/createWithArray:
  #   post:
  #     tags:
  #       - "user"
  #     summary: "Creates list of users with given input array"
  #     description: ""
  #     operationId: "createUsersWithArrayInput"
  #     produces:
  #       - "application/json"
  #     parameters:
  #       - in: "body"
  #         name: "body"
  #         description: "List of user object"
  #         required: true
  #         schema:
  #           type: "array"
  #           items:
  #             $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/createWithList:
  #   post:
  #     tags:
  #       - "user"
  #     summary: "Creates list of users with given input array"
  #     description: ""
  #     operationId: "createUsersWithListInput"
  #     produces:
  #       - "application/xml"
  #       - "application/json"
  #     parameters:
  #       - in: "body"
  #         name: "body"
  #         description: "List of user object"
  #         required: true
  #         schema:
  #           type: "array"
  #           items:
  #             $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout_user"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "retrieve_user_by_name"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "update_user"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Location:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      lat:
        type: "integer"
        format: "int64"
      lng:
        type: "integer"
        format: "int64"
      address1:
        type: "string"
      address2:
        type: "string"
      address3:
        type: "string"
      area_code:
        type: "string"
      city_town:
        type: "string"
      region:
        type: "string"
      time_zone:
        type: "string"
      country:
        $ref: "#/definitions/Country"
  Country:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      country_name:
        type: "string"
      country_code:
        type: "string"
      country_flag:
        type: "string"
      country_flag_emoji:
        type: "string"
      currency:
        $ref: "#/definitions/Currency"
  Currency:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      currency_name:
        type: "string"
      currency_code:
        type: "string"
      currency_symbol:
        type: "string"
      currency_short:
        type: "string"
  Language:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      language_name:
        type: "string"
      language_code:
        type: "string"
  CableData:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      type:
        type: "string"
        description: "Cable type"
        enum:
          - "5-Tower"
          - "6-Tower"
          - "2-Tower"
      direction:
        type: "string"
        description: "Direction of the running cable"
        enum:
          - "clockwise"
          - "counter-clockwise"
          - "straight-line"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      user_role:
        type: "string"
        description: "User role"
        enum:
          - "admin"
          - "park_admin"
          - "rider"
  Wakepark:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Stoke City Wakepark"
      park_audience:
        type: "string"
        description: "Type audience for the wakepark"
        enum:
          - "public"
          - "private"
          - "by appointment"
          - "planned"
      park_open:
        type: "boolean"
        description: "Is the park currently open?"
      park_published:
        type: "boolean"
        description: "Is the park ready to be viewed online?"
      logo_url:
        type: "string"
        description: "URL String for the wakepark logo"
      email1:
        type: "string"
      email2:
        type: "string"
      telephone1:
        type: "string"
      telephone2:
        type: "string"
      instagram_url:
        type: "string"
      facebook_url:
        type: "string"
      youtube_url:
        type: "string"
      vimeo_url:
        type: "string"
      twitter_url:
        type: "string"
      website_url:
        type: "string"
      summary:
        type: "string"
        description: "The headline (short) summary of wakepark."
      description:
        type: "string"
        description: "The full (long) description of the wakepark, its facilities and what it offers."
      location:
        $ref: "#/definitions/Location"
      languages:
        type: "array"
        items:
          type: "string"
          description: "Language codes"
      cable_type:
        $ref: "#/definitions/CableData"
      images:
        type: "array"
        items:
          type: "string"
          description: "Image URLs"
      videos:
        type: "array"
        items:
          type: "string"
          description: "Video URLs"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about WakeMaps"
  url: ""
